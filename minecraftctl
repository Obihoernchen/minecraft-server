#!/bin/bash


# Adapted from generic minecraft init script
#	 http://www.minecraftwiki.net/wiki/Tutorials/Server_startup_script
#
# Main Differences: 
#   - Start stop and reload is handled by systemd, removed
#   - update handled by pacman, removed
#   - changed from init script to "minecraftctl" command.
#   - uses /etc/conf.d/minecraftd for variables
#
# Changes:
#
#   Changed running screen to work as root, broke it out into mc_docommand


. /etc/minecraft.conf || echo "can't source /etc/minecraft.conf"

ME=`whoami`
as_user() {
  if [ $ME == $MCUSER ] ; then
    bash -c "$1"
  else
    su - $MCUSER -c "$1"
  fi
}

mc_saveoff() {
  if pgrep -u $MCUSER -f $SERVICE > /dev/null
  then
    echo "$SERVICE is running... suspending saves"
	mc_docommand "say $BACKUPSTARTMSG"
	mc_docommand save-all
	mc_docommand save-off
    sync
    sleep 10
  else
    echo "$SERVICE is not running. Not suspending saves."
  fi
}

mc_saveon() {
  if pgrep -u $MCUSER -f $SERVICE > /dev/null
  then
    echo "$SERVICE is running... re-enabling saves"
	mc_docommand save-on
	mc_docommand "say $BACKUPENDMSG"
  else
    echo "$SERVICE is not running. Not resuming saves."
  fi
}

mc_update() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo "$SERVICE is running! Will not start update."
  else
    as_user "cd $_SRVDIR && wget -O $_SRVDIR/minecraft_server.jar.update $MC_SERVER_URL"
    if [ -f $_SRVDIR/minecraft_server.jar.update ]
    then
      if `diff $_SRVDIR/$SERVICE $_SRVDIR/minecraft_server.jar.update >/dev/null`
      then 
        echo "You are already running the latest version of $SERVICE."
      else
        as_user "mv $_SRVDIR/minecraft_server.jar.update $_SRVDIR/$SERVICE"
        echo "Minecraft successfully updated."
      fi
    else
      echo "Minecraft update could not be downloaded."
    fi
  fi
}

mc_backup() {
   mc_saveoff
   
   NOW=`date "+%Y-%m-%d_%Hh%M"`
   BACKUP_FILE="$BACKUPPATH/${WORLD}_${NOW}.tar"
   echo "Backing up minecraft world..."
   #as_user "cd $_SRVDIR && cp -r $WORLD $BACKUPPATH/${WORLD}_`date "+%Y.%m.%d_%H.%M"`"
   as_user "tar -h -C \"$_SRVDIR\" -cf \"$BACKUP_FILE\" $WORLD"

   echo "Backing up $SERVICE"
   as_user "tar -h -C \"$_SRVDIR\" -rf \"$BACKUP_FILE\" $SERVICE"
   #as_user "cp \"$_SRVDIR/$SERVICE\" \"$BACKUPPATH/minecraft_server_${NOW}.jar\""

   mc_saveon

   echo "Compressing backup..."
   as_user "gzip -f \"$BACKUP_FILE\""
   echo "Done."
}
   
mc_overviewer() {
   # check whether newest client is installed
   if [ ! -e "${_CLIENTDIR}/${MCVERSION}" ]; then
     mc_updateClient
   fi
   mc_saveoff
   echo "Creating world backup to generate overviewer map from the backup"
   as_user "rsync -rt --delete \"${_SRVDIR}/${WORLD}\" \"$BACKUPPATH\""
   mc_saveon

   # Generate map with overviewer
   #echo "Executing overviewer with additional argument(s): $1"
   #as_user "overviewer.py --config=$MAP_CONFIG $1"
   # Generate map with Mapcrafter
   echo "Executing Mapcrafter with additional argument(s): $1"
   as_user "mapcrafter -c /etc/mapcrafter.conf -j 2 $1"
   
   echo "Copy files to Webserver"
   rsync -rt --delete ${_SRVDIR}/map/ $_MAPDIR
   #chown -R wwwrun:www $_MAPDIR
   echo "Finished"
}
   
mc_updateClient() {
  # check whether newest client is installed
  if [ -e "${_CLIENTDIR}/${MCVERSION}" ]; then
     echo "newest client ver. ${MCVERSION} is installed already"
  else
    # Download the new Minecraft client software
    echo "downloading newest client ${MCVERSION}"
    as_user "wget -P \"${_CLIENTDIR}/${MCVERSION}\" \"$CLIENT_URL\""
    # update mapcrafter textures
    mapcrafter_textures.py -f "${_CLIENTDIR}/${MCVERSION}/${MCVERSION}.jar" "/usr/local/share/mapcrafter/textures/"
  fi
}

mc_command() {
  command="$1";
  if pgrep -u $MCUSER -f $SERVICE > /dev/null
  then
    pre_log_len=`wc -l "$_SRVDIR/server.log" | awk '{print $1}'`
    echo "$SERVICE is running... executing command"
	mc_docommand "$command"
    sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    tail -n $[`wc -l "$_SRVDIR/server.log" | awk '{print $1}'`-$pre_log_len] "$_SRVDIR/server.log"
  fi
}

mc_docommand() {
	screen -p 0 -S minecraft -X stuff "`printf \"$1\r\"`"
}


#Start-Stop here
case "$1" in
  backup)
    mc_backup
    ;;
  status)
    if pgrep -u $MCUSER -f $SERVICE > /dev/null
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  update)
    mc_update
    ;;
  updateClient)
    mc_updateClient
    ;;
  map|overviewer)
    mc_overviewer "$2"
    ;;
  command)
    if [ $# -gt 1 ]; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;

  *)
    echo "Usage: $0 {backup|status|update|updateClient|map|command \"server command\"}"
    exit 1
  ;;
esac

exit 0
